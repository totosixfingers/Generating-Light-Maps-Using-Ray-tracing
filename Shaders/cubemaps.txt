#version 330 core
layout (location = 0) in vec3 aPos;
layout (location = 1) in vec2 aTexCoords;

out vec2 TexCoords;

uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;

void main()
{
    TexCoords = aTexCoords;    
    gl_Position = projection * view * model * vec4(aPos, 1.0);
}


vert

#version 330 core
layout (location = 0) in vec3 aPos;
layout (location = 1) in vec3 Normal;
layout (location = 2) in vec2 UV;
out vec3 WorldPos;
out vec3 Norm;
uniform mat4 projection;
uniform mat4 view;


void main()
{
    WorldPos = aPos;  
	Norm = Normal;
    gl_Position = projection * vec4(UV,0.0, 1.0);
}

frag

#version 330 core
layout(location = 0) out vec4 FragColor;
in vec3 WorldPos;
in vec3 Norm;
uniform samplerCube environmentMap;

const float PI = 3.14159265359;

void main()
{		
	
    
	//vec3 N = normalize(WorldPos);
	vec3 N = Norm;
    vec3 irradiance = vec3(0.0);   
    
    // tangent space calculation from origin point
    vec3 up    = vec3(0.0, 1.0, 0.0);
    vec3 right = cross(up, N);
    up            =  cross(N, right);
       
    float sampleDelta = 0.08;
    float nrSamples = 0.0;
    for(float phi = 0.0; phi < 2.0 * PI; phi += sampleDelta)
    {
        for(float theta = 0.0; theta < 0.5 * PI; theta += sampleDelta)
        {
            // spherical to cartesian (in tangent space)
            vec3 tangentSample = vec3(sin(theta) * cos(phi),  sin(theta) * sin(phi), cos(theta));
            // tangent space to world
            vec3 sampleVec = tangentSample.x * right + tangentSample.y * up + tangentSample.z * N; 

            irradiance += texture(environmentMap, sampleVec).rgb * cos(theta) * sin(theta);
            nrSamples++;
        }
    }
    irradiance = PI * irradiance * (1.0 / float(nrSamples));
    
    FragColor = vec4(irradiance, 1.0);
}

vert

#version 330 core

out vec3 Pos;
out vec3 N;
out vec2 UV;

layout (location = 0) in vec3 aPos;
layout (location = 1) in vec3 Normal;
layout (location = 2) in vec2 tex;

uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;



void main()
{
    Pos = (model* vec4(aPos, 1.0)).xyz; 
    N = (model* vec4(Normal, 1.0)).xyz; 
	UV =tex;
    gl_Position = projection*vec4(tex,0, 1.0);
}
frag

#version 330

in vec3 Pos; 
in vec3 N;    
in vec2 UV;

layout(location=0)out vec3 object1Coords;
layout(location=1)out vec3 object1Norms;
layout(location=2)out vec3 object1Texcoords;

void main()
{
    object1Coords = Pos;
    object1Norms = normalize(N);
	object1Texcoords=vec3(UV,1.0);
}

